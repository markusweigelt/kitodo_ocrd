{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Integration of OCR-D and Kitodo", "text": "<p>This site hosts the documentation for the integration of OCR-D with Kitodo.</p> <p>This page provides an overview and links to related resources.</p>"}, {"location": "#project", "title": "Project", "text": "<p>Our DFG-funded implementation project \"Integration of Kitodo and OCR-D for productive mass digitisation\" is intended to enable the use of Open Source OCR with OCR-D in mass digitization workflows with Kitodo.</p> <p></p> <p></p>"}, {"location": "#references", "title": "References", "text": "<ul> <li>OCR-D</li> <li>Kitodo</li> <li>Integration Project</li> </ul>"}, {"location": "#repositories", "title": "Repositories", "text": "<ul> <li>OCR-D Manager</li> <li>OCR-D Controller</li> <li>Kitodo.Production</li> </ul>"}, {"location": "#something-missing", "title": "Something Missing?", "text": "<p>If something is missing in the documentation or if you found some part confusing, please add an issue to our repository with your suggestions for improvement. We are happy about any feedback!</p>"}, {"location": "getting-started/", "title": "Getting started", "text": "<p>The documentation is structured in two main parts: </p> <ul> <li>The Setup part describes all the information    to install, configure and run the various services of the modules as needed. </li> <li>The Usage part contains information about    configuration and usage of those services at runtime.</li> </ul> <p>For the impatient, the following provides a quickstart look of what you would typically need to do when getting started the first time.</p>"}, {"location": "getting-started/#quickstart", "title": "Quickstart", "text": "<p>Make sure that the system prerequisites are met, including having <code>make</code> installed.</p> <p>Then go to the directory where you have checked out the project, and do:</p> <pre><code>make prepare\n\nmake start\n</code></pre> <p>Now the services for all modules have been started and filled with dummy data for a demonstration example. (So the latter page explains how you can start OCR processing from the Kitodo application.)</p>"}, {"location": "getting-started/#overview-of-modules", "title": "Overview of modules", "text": "<p>Our project consists of three modules:</p> <ul> <li>the OCR-D Manager,</li> <li>the OCR-D Controller and</li> <li>Kitodo.Production.</li> </ul> <p>The latter two modules are optional: For either of these, an existing installation can be used (see Configure External for more details).</p> <p>Each module in turn comprises a number of services:</p> <pre><code>graph LR\nsubgraph KPM[Kitodo.Production Module]\nDB\nEL\nMQ\nKP\nend\nsubgraph MAM[OCR-D Manager Module]\nMO\nMA\nend\nsubgraph COM[OCR-D Controller Module]\nCO\nend\n\nMA(OCR-D Manager) &lt;--&gt; CO(OCR-D Controller)\nMO(OCR-D Monitor) --&gt; MA\nKP(Kitodo.Production) --&gt; MA\nKP -.-&gt;  DB(Database)\nKP -.-&gt;  EL(Elastic Search)\nKP -.-&gt;  MQ(Active MQ)\nMA -.-&gt; MQ\n\nstyle KPM stroke-dasharray: 5 5\nstyle COM stroke-dasharray: 5 5</code></pre> <p>The OCR-D Manager module contains the homonym OCR-D Manager service and the OCR-D Monitor service. </p> <p>The OCR-D Manager service mediates between Kitodo.Production and OCR-D Controller on the system level for each OCR processing task. This task is saved as job information file. The OCR-D Monitor service provides a web interface to view running or already completed jobs, and their respective OCR results and workflow configuration. In the future, it will also support managing workflows and triggering or rerunning jobs.</p> <p>Besides Kitodo.Production, you can also link Kitodo.Presentation or other applications to the OCR-D Manager.</p>"}, {"location": "setup/configure-external/", "title": "Configure External", "text": "<p>This page describes how to configure an external OCR-D Controller or Kitodo.Production instance. So if you do not wish to run the built-in OCR-D Controller and/or Kitodo.Production module,  then read the respective section below. Otherwise, you can skip this page and continue with Preparation.</p>"}, {"location": "setup/configure-external/#configuring-an-external-ocr-d-controller-instance", "title": "Configuring an external OCR-D Controller instance", "text": "<p>If you do not wish to run the built-in OCR-D Controller instance (by omitting <code>with-ocrd-controller</code> in <code>$COMPOSE_PROFILES</code>), you may instead want to set up an external OCR-D Controller server to interoperate with the OCR-D Manager. This is how.</p>"}, {"location": "setup/configure-external/#prerequisites", "title": "Prerequisites", "text": ""}, {"location": "setup/configure-external/#repo", "title": "repo", "text": "<p>First, check out the Controller. Either - <code>cd _modules/ocrd_controller</code> (if you already have checked out ocrd_kitodo on that machine), or - <code>git clone https://github.com/slub/ocrd_controller &amp;&amp; cd ocrd_controller</code> (otherwise)</p>"}, {"location": "setup/configure-external/#credentials", "title": "credentials", "text": "<p>You will also need the public SSH key file for login from the Manager to the Controller, created on the ocrd_kitodo host via <code>make prepare-keys</code> under <code>ocrd/controller/.ssh/authorized_keys</code> ready on this machine.</p>"}, {"location": "setup/configure-external/#setup", "title": "Setup", "text": "<p>There are multiple scenarios:</p>"}, {"location": "setup/configure-external/#docker-running-manually-via-make", "title": "Docker, running manually via make", "text": "<p>Following the standalone documentation, choose your parameter values (persistent storage, key, CPUs, SSH port) and make run.</p> <p>For example:</p> <pre><code>export DATA=/mnt/workspaces\nexport MODELS=~/.local/share\nexport CONFIG=~/.config/share\nexport KEYS=authorized_keys\nexport WORKERS=2\nexport PORT=8022\nmake run\n</code></pre>"}, {"location": "setup/configure-external/#docker-running-manually-via-docker-compose", "title": "Docker, running manually via Docker Compose", "text": "<p>Mimicking the Docker Compose / <code>.env</code> approach from the top-level repo, choose your parameter values (persistent storage, key, CPUs, SSH port) and docker compose up.</p> <p>For example:</p> <pre><code>echo \"CONTROLLER_IMAGE=ghcr.io/slub/ocrd_controller:latest\" &gt; .env\necho \"CONTROLLER_HOST=ocrd-server\" &gt;&gt; .env\necho \"CONTROLLER_PORT_SSH=8022\" &gt;&gt; .env\necho \"CONTROLLER_ENV_UID=$(id -u)\" &gt;&gt; .env\necho \"CONTROLLER_ENV_GID=$(id -g)\" &gt;&gt; .env\necho \"CONTROLLER_ENV_UMASK=0002\"   &gt;&gt; .env\necho \"CONTROLLER_WORKERS=2\"        &gt;&gt; .env\necho \"CONTROLLER_KEYS=authorized_keys\" &gt;&gt; .env\necho \"CONTROLLER_DATA=/mnt/workspaces\" &gt;&gt; .env\necho \"CONTROLLER_MODELS=~/.local/share\" &gt;&gt; .env\necho \"CONTROLLER_CONFIG=~/.config/share\" &gt;&gt; .env\ndocker compose up -d\n</code></pre>"}, {"location": "setup/configure-external/#docker-running-via-systemctl", "title": "Docker, running via systemctl", "text": "<p>Choose your parameter values (persistent storage, key, CPUs, SSH port) and create a persistent system service.</p> <p>For example:</p> <pre><code>[Unit]\nDescription = Service with SSH 8022 server for OCR-D processing\nAfter = network.target\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker stop %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStart=docker run --restart=unless-stopped -p 8022:22 --name %n -h %n \\\n      -v /mnt/workspaces/:/data \\\n      -v /home/you/.local/share:/models \\\n      -v /home/you/.config/share:/config \\\n      --mount type=bind,source=/home/you/ocrd_controller/authorized_keys,target=/authorized_keys \\\n      --tmpfs /tmp:rw,noexec,nosuid,nodev,size=2g \\\n      -e UID=1003 -e GID=100 -e UMASK=0002 -e WORKERS=2 \\\n      --cpus=2 --gpus=all ghcr.io/slub/ocrd_controller\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy = multi-user.target\n</code></pre> <p>Place that under <code>/etc/systemd/system/ocrd_controller.service</code> (or similar), then (once) do <code>sudo systemctl daemon-reload</code>, followed by <code>sudo systemctl start ocrd_controller.service</code>.</p> <p>(This service will go up with the next boot automatically.)</p>"}, {"location": "setup/configure-external/#native-ocrd_all-and-ssh-server-installation", "title": "native ocrd_all and SSH server installation", "text": "<p>Obviously, if you already have a native installation of ocrd_all, which you also want to use (and maintain) directly, then you don't need Docker to run the Controller as an SSH server on top of it.</p> <p>(In the following, let's assume you'll also want to re-use the normal system-wide SSH service for your normal users.)</p> <p>Install an SSH server:</p> <pre><code>sudo apt-get update\nsudo apt-get install wget git openssh-server rsyslog rsync\n</code></pre> <p>Create a Unix users <code>ocrd</code> (for processing) and <code>admin</code> (for job monitoring), hooking into your ocrd_all venv and adding a <code>$WORKERS</code> login semaphore at login time, and register the key file with them:</p> <pre><code>sudo su\nuseradd -s /bin/bash -c \"SSH OCR user\" ocrd\nuseradd -s /bin/bash -c \"SSH control user\" -u $(id -u ocrd) -g $(id -g ocrd) -M -d /home/ocrd admin\ncd /home/ocrd\nmkdir -p .parallel .ssh\ntouch .hushlogin\necho \". /path/to/your/ocrd_all/venv/bin/activate\" &gt;&gt; .bashrc\necho \"umask 0002\" &gt;&gt; .bashrc\necho \"cd /mnt/workspaces\" &gt;&gt; .bashrc\ncp /path/to/your/authorized_keys .ssh\n# \"admin\" can always login, but \"ocrd\" may have to wait:\necho 'test x$USER != xocrd &amp;&amp; exit' &gt;&gt; .ssh/rc\n# determine the parent shell session\necho 'parent=$(cat /proc/$PPID/stat | cut -d\\  -f4)' &gt;&gt; .ssh/rc\necho \"workers=${WORKERS:-1}\" &gt;&gt; .ssh/rc\n# enter semaphore during login\necho 'sem --will-cite -j $workers --bg --id ocrd_controller_job tail --pid $parent -f /dev/null' &gt;&gt; .ssh/rc\nchmod go-rwx .ssh/*\nchown -R ocrd:ocrd /home/ocrd\n</code></pre> <p>Now, simply do:</p> <pre><code>sudo service ssh start\n</code></pre>"}, {"location": "setup/configure-external/#connect-from-ocrd_kitodo", "title": "Connect from ocrd_kitodo", "text": "<p>After you have set up the external OCR-D Controller instance, you need to configure your OCR-D Manager for the connection. You can either customize its <code>.env</code> file, or simply export the respective environment variables on the shell (which will override the .env settings).</p> <p>For example:</p> <pre><code>export CONTROLLER_HOST=ocrserver # remote address\nexport CONTROLLER_PORT_SSH=8022 # or 22 for native SSH\n</code></pre>"}, {"location": "setup/configure-external/#adapting-an-external-kitodoproduction-instance", "title": "Adapting an external Kitodo.Production instance", "text": "<p>If do not wish to run the built-in Kitodo.Production container instance (by omitting <code>with-kitodo-production</code> in <code>$COMPOSE_PROFILES</code>), you may instead want to set up an external Kitodo.Production server to interoperate with the OCR-D Manager. This is how.</p> <p>You may not need all OCR-D specific extensions (currently, only a new tab in the project tab for configuring OCR workflow files).</p> <p>At the very least, you must install the actual scripts for OCR-D specific OCR script tasks, and some SSH keys.</p> <p>If you just run\u2026</p> <pre><code>make prepare\n</code></pre> <p>\u2026you will also be instructed to do so.</p> see output <p> <pre><code>mkdir -p kitodo/.ssh/\nssh-keygen -t rsa -q -f kitodo/.ssh/id_rsa -P '' -C 'Kitodo.Production key'\n    You should now install the private key kitodo/.ssh/id_rsa\n    to your own Kitodo.Production instance,\n    or conversely, install the existing public key ~/.ssh/id_rsa.pub\n    of your own Kitodo.Production instance\n    to ./ocrd/manager/.ssh/authorized_keys.\nmkdir -p ocrd/manager/.ssh/\ncp kitodo/.ssh/id_rsa.pub ocrd/manager/.ssh/authorized_keys\nssh-keygen -t rsa -q -f ocrd/manager/.ssh/id_rsa -P '' -C 'OCR-D manager key'\nmkdir -p ocrd/controller/.ssh/\ncp ocrd/manager/.ssh/id_rsa.pub ocrd/controller/.ssh/authorized_keys\nmkdir -p kitodo/data/metadata/\nmkdir -p kitodo/overwrites/\ncp -r ./_resources/kitodo/data kitodo/overwrites/data\nmkdir -p kitodo/overwrites/data/ocr_workflows/\ncp ./_modules/ocrd_manager/ocr-workflow-default.sh kitodo/overwrites/data/ocr_workflows/\n    You should now copy kitodo/overwrites/data/scripts\n    to your own Kitodo.Production instance\n    (typically under /usr/local/kitodo).\n</code></pre> </p> <p>For example (assuming your Kitodo instance's local username is <code>tomcat</code>):</p> <pre><code>scp -r kitodo/overwrites/data/scripts tomcat@kitodo-server:/usr/local/kitodo\nscp tomcat@kitodo-server:.ssh/id_rsa.pub ocrd/manager/.ssh/authorized_keys\n</code></pre> <p>These scripts make reference to the <code>$OCRD_MANAGER</code> variable, which points to the OCR-D Manager instance (address:port). Make sure you export/set this variable appropriately for the Kitodo instance. For example:</p> <pre><code>echo 'export OCRD_MANAGER=ocrd-server:9022 &gt;&gt; ~/.bashrc' | ssh tomcat@kitodo-server\n</code></pre> <p>Then restart the Kitodo.Production server.</p>"}, {"location": "setup/configure-modules/", "title": "Configure Modules", "text": "<p>The following variables must be defined when starting the module service(s), respectively.</p> <p>Note: By default this is done in <code>.env</code> file (with shell-like syntax). But any environment variable settings via shell or <code>make</code> call take precedence of <code>.env</code> configuration. So for example, you can <code>source .env</code> and then customize the default values interactively. Alternatively, you can import a customized file, e.g. <code>source .env.local</code>.)</p> <p>Note: When using the Makefile, some of the static settings in <code>.env</code> will always be overridden dynamically: To optimally match ownership and permissions of existing files with new data to be written, the UID and GID of the <code>ocrd</code> user on the Controller and Manager are taken from the host system.</p> <p>Note: If you do not want to <code>make build</code> the images yourself, but use the prebuilt images from GitHub Container Registry, then mind the image tag variables. Instead of the default <code>latest</code> development version, you may want to use a stable release: Just checkout the respective Git release, and <code>.env</code> should already point to stable tags.</p>"}, {"location": "setup/configure-modules/#ocr-d-manager", "title": "OCR-D Manager", "text": "Name Default Description MANAGER_BASE_VERSION latest tag of ocrd/core from stage version MANAGER_IMAGE ghcr.io/slub/ocrd_manager:latest name and tag of image MANAGER_HOST ocrd-manager name/address of server (for Kitodo) MANAGER_PORT_SSH 9022 host-side port to exposed SSH server (for external Kitodo) MANAGER_PORT_WEB 4004 port of web endpoint MANAGER_ENV_UID 1001 user id of SSH user (<code>id -u</code> when using <code>make</code>) MANAGER_ENV_GID 1001 group id of SSH user (<code>id -g</code> when using <code>make</code>) MANAGER_ENV_UMASK 0002 ssh user specific permission mask MANAGER_KEYS <code>./ocrd/manager/.ssh/authorized_keys</code> file path with public SSH keys of users allowed to log in MANAGER_KEY <code>./ocrd/manager/.ssh/id_rsa</code> file path with private SSH key of internal <code>ocrd</code> user (should match one of <code>CONTROLLER_KEYS</code>) MANAGER_DATA <code>./kitodo/data/metadata</code> persistent data volume to mount MANAGER_WORKFLOWS <code>./_modules/ocrd_manager/workflows</code> persistent volume for workflows <p>It is allowed and realistic if <code>MANAGER_DATA</code> is different from <code>CONTROLLER_DATA</code>. Input/output will be synchronized between them at runtime.</p> <p>Currently, <code>MANAGER_DATA</code> should be the same path as <code>APP_DATA/metadata</code> (which could be just a NFS mountpoint on either side).</p>"}, {"location": "setup/configure-modules/#ocr-d-monitor", "title": "OCR-D Monitor", "text": "<p>The OCR-D Manager module also includes an OCR-D Monitor service, which can also be configured here.</p> Name Default Description MONITOR_IMAGE ghcr.io/slub/ocrd_monitor:latest name and tag of image MONITOR_HOST ocrd-monitor name/address of server MONITOR_PORT_WEB 5000 host-side port to exposed Web server MONITOR_PORT_LOG 8088 host-side port to exposed Dozzle (Docker log viewer) MONITOR_PORT_DBM 8082 host-side port to exposed OCR-D Database Management (Mongo Express) MONITOR_DB_ROOT_USER root root user of OCR-D database MONITOR_DB_ROOT_PASSWORD root_password root password of OCR-D database <p>Currently, <code>MONITOR_DATA</code> should be the same path as <code>MANAGER_DATA</code>.</p>"}, {"location": "setup/configure-modules/#ocr-d-controller", "title": "OCR-D Controller", "text": "<p>(only relevant in profile with-ocrd-controller, see Enable/Disable Modules)</p> Name Default Description CONTROLLER_BASE_VERSION 2024-03-08 tag of ocrd/all from stage version CONTROLLER_IMAGE ghcr.io/slub/ocrd_controller:latest name and tag of image CONTROLLER_HOST ocrd-controller name/address of server (for Manager/Monitor) CONTROLLER_PORT_SSH 22 SSH port (for Manager/Monitor) CONTROLLER_ENV_UID 1001 user id of SSH user (<code>id -u</code> when using <code>make</code>) CONTROLLER_ENV_GID 1001 group id of SSH user (<code>id -g</code> when using <code>make</code>) CONTROLLER_ENV_UMASK 0002 SSH user specific permission mask CONTROLLER_KEYS <code>./ocrd/controller/.ssh/authorized_keys</code> file path with public SSH keys of users allowed to log in CONTROLLER_DATA <code>./ocrd/controller/data</code> persistent data volume to mount CONTROLLER_MODELS <code>./ocrd/controller/models</code> path to persistent models (in <code>ocrd-resources/</code>) CONTROLLER_CONFIG <code>./ocrd/controller/config</code> path to persistent config (in <code>ocrd/resources.yml</code>) CONTROLLER_WORKERS 1 number of workers for processing"}, {"location": "setup/configure-modules/#kitodoproduction", "title": "Kitodo.Production", "text": "<p>(only relevant in profile with-kitodo-production, see Enable/Disable Modules)</p>"}, {"location": "setup/configure-modules/#application", "title": "Application", "text": "Name Default Description APP_IMAGE ghcr.io/slub/ocrd_kitodo/kitodo_production_ocrd:latest name and tag of image APP_BUILD_CONTEXT <code>./_modules/kitodo-production-docker/</code> directory of Dockerfile APP_BUILDER_GIT_REF master branch \"ocrd-main\" of git repository (cause using <code>git</code> as <code>BUILDER_TYPE</code>) APP_BUILDER_GIT_REPOSITORY kitodo/kitodo-production repository of <code>BUILDER_GIT_COMMIT</code> (cause using <code>git</code> as <code>BUILDER_TYPE</code>) APP_DATA <code>./kitodo/data</code> persistent volume of application data to mount, e.g. config and modules APP_KEY <code>./kitodo/.ssh/id_rsa</code> file path with private SSH key of <code>ocrd</code> user (should match one of <code>MANAGER_KEYS</code>) APP_PORT 8080 host-side port of Kitodo.Production"}, {"location": "setup/configure-modules/#database", "title": "Database", "text": "Name Default Description DB_IMAGE mysql:8.0.32 name and tag of image DB_HOST kitodo-db name/address of database (for Kitodo) DB_PORT 3306 host-side port to exposed database DB_ROOT_USER root DB_ROOT_PASSWORD 1234 root user password DB_NAME kitodo name of database used by Kitodo.Production DB_USER kitodo username to access database DB_USER_PASSWORD kitodo password used by username to access database"}, {"location": "setup/configure-modules/#elastic-search", "title": "Elastic Search", "text": "Name Default Description ES_IMAGE elasticsearch:7.17.8 name and tag of image ES_HOST kitodo-es name/address of server (for Kitodo) ES_REST_PORT 9200 host-side port to REST API ES_NODE_PORT 9300 host-side port to inter-node protocol"}, {"location": "setup/configure-modules/#active-mq", "title": "Active MQ", "text": "Name Default Description MQ_IMAGE ghcr.io/slub/kitodo-production-activemq:latest name and tag of image MQ_HOST kitodo-mq name/address of server (for Kitodo/Manager) MQ_PORT 61616 host-side port to exposed TCP Transport"}, {"location": "setup/enable-disable-modules/", "title": "Enable/Disable Modules", "text": "<p>Of the 3 main modules integrated here, while the OCR-D Manager is mandatory,  the OCR-D Controller and Kitodo.Production are optional  (i.e. the may be run independently/remotely standalone, or not at all).</p>"}, {"location": "setup/enable-disable-modules/#compose-profiles", "title": "Compose profiles", "text": "<p>You can tell Docker Compose whether to enable (i.e. start and stop) or disable (i.e. ignore)  their associated services, simply by selecting profiles:</p> <ul> <li><code>with-ocrd-controller</code> profile enables OCR-D Controller service (<code>ocrd-controller</code>)</li> <li><code>with-kitodo-production</code> profile enables all Kitodo.Production services (<code>kitodo-app</code>, <code>kitodo-db</code>, <code>kitodo-es</code> and <code>kitodo-mq</code>)</li> </ul> <p>Without the use of these profiles, only the services of OCR-D Manager module will be run (<code>ocrd-manager</code>, <code>ocrd-monitor</code>, <code>ocrd-logview</code>).</p> <p>The most convenient way is by setting the environment variable <code>COMPOSE_PROFILES</code> in the shell.  The default in the Makefile is:</p> <pre><code>COMPOSE_PROFILES=with-kitodo-production,with-ocrd-controller\n</code></pre> <p>i.e. both optional modules are enabled. </p> <p>Setting any value in the shell will override that default when using <code>make</code> (and also allow using <code>docker compose</code> commands directly without <code>make</code>).</p> <p>The following four possibilities arise:</p> <pre><code>export COMPOSE_PROFILES=                       # Running module OCR-D Manager only\nexport COMPOSE_PROFILES=with-ocrd-controller   # Running modules OCR-D Manager + OCR-D Controller\nexport COMPOSE_PROFILES=with-kitodo-production # Running modules OCR-D Manager + Kitodo.Production\nexport COMPOSE_PROFILES=with-kitodo-production,with-ocrd-controller # Running all modules\n</code></pre> <p>Note: Without the <code>with-ocrd-controller</code> profile, you must build, configure, start and stop the OCR-D Controller externally and possibly remotely.</p> <p>In that case you must configure where the Manager can find that standalone Controller. For example, you may want to set:</p> <pre><code>export CONTROLLER_ENV_UID=$(id -u) CONTROLLER_HOST=ocrserver CONTROLLER_PORT_SSH=8022\n</code></pre> <p>Moreover, the Controller must have a SSH public key in its <code>/.ssh/authorized_keys</code> matching the private key used by the Manager.</p> <p>For details, see section Configuring an external OCR D Controller instance  of the Configure External page.</p> <p>Note: Without the <code>with-kitodo-production</code> profile, you may want to build, configure, start and stop Kitodo.Production externally and possibly remotely.</p> <p>In that case you must configure its <code>OCRD_MANAGER</code> environment variable, so it can find the Manager over the network. For example:</p> <pre><code>export OCRD_MANAGER=ocrd-server:9022 &gt;&gt; ~/.bashrc\n</code></pre> <p>Moreoever, the Manager must have a SSH public key in its <code>/.ssh/authorized_keys</code> matching the private key used by Kitodo.Production.</p> <p>For details, see section Adapting an external Kitodo.Production instance  of the Configure External page.</p>"}, {"location": "setup/preparation/", "title": "Preparation", "text": "<p>Go to the directory where you have checked out the project.</p>"}, {"location": "setup/preparation/#prepare-keys-and-kitodo-extensions", "title": "Prepare keys and Kitodo extensions", "text": "<p>Before Docker Compose can be used, you must create directories to mount SSH key pairs for user authentication to OCR-D Controller (from Manager) and OCR-D Manager (from Kitodo.Production or Kitodo.Presentation etc).</p> <p>Also, in case you have enabled Kitodo.Production as a module here, you must install some extensions into Kitodo.Production. For testing you probably need example data (e.g. users, authorities, workflows etc.) set up in its database, too.</p> <p>The simplest way to get all that is by using the Makefile via the following commands:</p> <pre><code>make prepare          # generate all required files\nmake prepare-keys     # generate only SSH credentials (keys)\nmake prepare-data     # generate only Kitodo extensions (scripts)\nmake prepare-examples # generate only Kitodo database entries\nmake clean            # remove all generated files\n</code></pre> <p>Note: This may not meet your exact scenario entirely. To customize, have a look at the rules, or simulate running them via <code>make -n prepare</code>, or modify the results afterwards.</p> <p>(For example, if you have set up the OCR-D Controller externally, you will have to manually append to its <code>authorized_keys</code> the file generated under <code>./ocrd/manager/.ssh/id_rsa.pub</code>, or copy the existing private key into <code>./ocrd/manager/.ssh/id_rsa</code>. Running the recipe will merely print instructions to do so.)</p> <p>Alternatively, perform the following steps manually:</p> <ul> <li> <p>Create directories to host SSH key pair files:</p> <pre><code>mkdir ./kitodo/.ssh/\nmkdir ./ocrd/manager/.ssh/\nmkdir ./ocrd/controller/.ssh/\n</code></pre> </li> <li> <p>Generate SSH key pairs in <code>./kitodo/.ssh/</code> and <code>./ocrd/manager/.ssh/</code>.</p> </li> <li> <p>After that, register the public keys on the other side, respectively:</p> <pre><code>mv ./kitodo/.ssh/id_rsa.pub ./ocrd/manager/authorized_keys\nmv ./ocrd/manager/id_rsa.pub ./ocrd/controller/authorized_keys\n</code></pre> </li> <li> <p>Copy contents of <code>./_resources/kitodo</code> and <code>./_resources/kitodo-sample</code> to the directory <code>./kitodo/overwrites</code> to provide the examples and Kitodo.Production configuration files.</p> </li> </ul>"}, {"location": "setup/preparation/#installation-of-ocr-d-models-to-ocr-d-controller", "title": "Installation of OCR-D models to OCR-D Controller", "text": "<p>For practical workflows, you first have to install models for various processors on the OCR-D Controller.</p> <p>Please follow the section Installing OCR-D Models of OCR-D Controller usage documentation.</p>"}, {"location": "setup/prerequisites/", "title": "Prerequisites", "text": ""}, {"location": "setup/prerequisites/#install-necessary-tools", "title": "Install necessary tools", "text": "<ol> <li>Install Docker Engine (<code>docker-ce</code>)</li> <li>Install Docker Compose (<code>docker-compose-plugin</code> \u2013 needed for <code>docker compose</code> replacing <code>docker-compose</code>)</li> <li>Install Nvidia Container Runtime (<code>nvidia-container-toolkit</code> \u2013 needed for Controller, even if no GPU is available)</li> <li>Install <code>git</code> </li> <li>(optionally) Install <code>make</code></li> </ol>"}, {"location": "setup/prerequisites/#clone-repository-and-initialize-submodules", "title": "Clone repository and initialize submodules", "text": "<p>Either clone recursively in the first place:</p> <pre><code>git clone --recurse-submodules https://github.com/slub/ocrd_kitodo\ncd ocrd_kitodo\n</code></pre> <p>Or, after cloning and entering the repository normally, clone all submodules:</p> <pre><code>git submodule update --init --recursive\n</code></pre>"}, {"location": "setup/running/", "title": "Running", "text": "<p>After preparing your environment, here is a set of commands for starting, stopping and building the modules, among others.</p> <p>The easiest and recommended way is to use <code>make</code>.</p> <p>Alternatively, we have listed the equivalent Docker Compose commands here. Make sure that the necessary modules are enabled via the Compose profiles.</p>"}, {"location": "setup/running/#building", "title": "Building", "text": "<p>If you want to run with prebuilt images from GitHub Container Registry (in which case make sure you have configured the right image version tags in your <code>.env</code>), you can skip this step.</p> <p>Otherwise, to build Docker images for all modules, do:</p> <pre><code>make build\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose build\n</code></pre>"}, {"location": "setup/running/#starting", "title": "Starting", "text": "<p>To start containers from images for all services:</p> <pre><code>make start\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose up -d\n</code></pre>"}, {"location": "setup/running/#stopping", "title": "Stopping", "text": "<p>To stop containers for all services:</p> <pre><code>make stop\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose stop\n</code></pre>"}, {"location": "setup/running/#stopping-and-removing", "title": "Stopping and removing", "text": "<p>To stop containers for all services, and then remove the stopped containers as well as any created networks, do:</p> <pre><code>make down\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose down\n</code></pre>"}, {"location": "setup/running/#dumping", "title": "Dumping", "text": "<p>To see the complete configuration for Docker Compose, do:</p> <pre><code>make config\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose config\n</code></pre>"}, {"location": "setup/running/#pulling", "title": "Pulling", "text": "<p>To pull the latest prebuilt Docker images for all services</p> <pre><code>make pull\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose pull\n</code></pre>"}, {"location": "setup/running/#status", "title": "Status", "text": "<p>To get a list of currently running containers, do:</p> <pre><code>make status\n</code></pre> <p>(or equivalently:)</p> <pre><code>docker compose ps\n</code></pre>"}, {"location": "usage/demo/", "title": "Demo", "text": "<p>Open your browser and navigate to <code>http://localhost:8080/kitodo</code> after OCR-D modules and Kitodo are started.</p> <p>Enter the username <code>testadmin</code> and the password <code>test</code> in the login dialog.</p> <p>(Unless, of course, you are using an external Kitodo instance, or have customized the data generated from <code>make prepare-examples</code>.)</p> <p>Note: If it is the first launch of Kitodo.Production, then the <code>Indexing</code> tab of the system page is displayed, because indexing still needs to be done. To perform the indexing, click on the button <code>Create ElasticSearch mapping</code>. After the mapping is created, click on the button <code>Start indexing</code> next to the <code>Whole index</code> label. After a few seconds, the index is created and you can navigate to the dashboard by clicking on the Kitodo.Production logo.</p>"}, {"location": "usage/demo/#kitodo-extensions", "title": "Kitodo extensions", "text": "<p>After the steps for installation of extra resources into Kitodo, specifically the subtarget <code>make prepare-data</code>, and starting up Kitodo.Production, a number of extensions will become available:</p> <ul> <li>a new script task for OCR processing from the process directory</li> <li>a new script task for OCR processing from the export directory</li> <li>a new example workflow which includes both of them</li> </ul> <p>You can find the latter under <code>Projects</code> -&gt; <code>Workflows</code> -&gt; <code>OCR_Workflow</code>.</p> <p></p> <p>In this Kitodo workflow, the script tasks <code>OCR from Process Dir</code> (before manual Structure Editor) and <code>OCR from Export Dir</code> (after DMS Export) have been added to trigger automatic OCR processing with OCR-D.</p> <p>Moreover, if during installation the subtarget <code>make prepare-examples</code> has been run, then an example user, project and process are present in the database. (That process uses the new workflow, but is stopped just prior to the first OCR.)</p>"}, {"location": "usage/demo/#execute-script-task-ocr-from-process-dir", "title": "Execute script task \"OCR from Process Dir\"", "text": "<p>This script task executes the script <code>script_ocr_process_dir.sh</code> from the <code>scripts</code> directory and passes the selected <code>process id</code> and the current <code>task id</code> as parameters.</p> <p>To execute this script task manually, navigate from the dashboard to <code>All processes</code> by clicking on the button in the Processes widget, or use the URL http://localhost:8080/kitodo/pages/processes.jsf?tabIndex=0.</p> <p>Select a process to execute the script task, and click on <code>Possible actions</code> and then on <code>Execute KitodoScript</code>.</p> <p>Type the following text into the form field:</p> <pre><code>action:runscript \"stepname:OCR from Process Dir\" \"script:OCR Process Dir\"\n</code></pre> <p>Then click on <code>Execute KitodoScript</code>. (This will run the simplistic Tesseract-based default workflow asynchronously. The process status will change as soon as the job is finished.)</p> <p>Watch <code>docker logs</code>, or look under the hood with the Monitor.</p>"}, {"location": "usage/demo/#execute-script-task-ocr-from-export-dir", "title": "Execute script task \"OCR from Export Dir\"", "text": "<p>This script task executes the script <code>script_ocr_export_dir.sh</code> from the <code>scripts</code> directory and passes the selected <code>process title</code> and the current <code>task id</code> as parameters. The automatic script task is bound to the manual task <code>Export DMS</code> in the workflow, because it needs the METS from the export directory that is created via the DMS export.</p> <p>To export the METS of a process manually, navigate from the dashboard to <code>All processes</code> by clicking on the button in the Processes widget, or use the URL http://localhost:8080/kitodo/pages/processes.jsf?tabIndex=0.</p> <p>Select a process to export, click on <code>Possible actions</code> and then on <code>Export DMS</code>. After a successful export, the METS is located in the export directory <code>/usr/local/kitodo/dms-export/</code> in a subdirectory named by the selected process.</p> <p>Note: The export directory can be changed under the project settings and can only be found in our sample project under this path <code>/usr/local/kitodo/dms-export/</code>. After that the status of the task can be set to <code>Completed</code> and our script task <code>OCR from Export Dir</code> will be executed automatically.</p> <p>Equivalently, to execute the script task manually after the METS has been exported (in some other workflow), enter an <code>Execute KitodoScript</code> action in the same way as above, but with the text:</p> <pre><code>action:runscript \"stepname:OCR from Export Dir\" \"script:OCR Export Dir\"\n</code></pre> <p>The <code>script_ocr_export_dir.sh</code> is still work in process, and does not perform any actual processing of the METS at the moment. (It only prints a message which parameters it was called with.)</p>"}, {"location": "usage/kitodo-production/", "title": "Kitodo.Production", "text": ""}, {"location": "usage/kitodo-production/#project-specific-ocr-workflows-experimental", "title": "Project specific OCR Workflows (experimental)", "text": "<p>Note: The feature is not currently available in the main Kitodo.Production repository or a release. To use the feature, you must use our Kitodo.Production OCR-D image or the non-official Kitodo.Production state from the following branch.</p> <p>Execute project-specific OCR workflows by binding an OCR workflow to a process template. When a new process is created, the OCR workflow file assigned to the process template is copied as <code>ocr_workflow.sh</code> to the process folder. Our <code>script_ocr.sh</code> script detects and uses the <code>ocr_workflow.sh</code> file as OCR workflow when executing the OCR script steps.</p> <p>To provide this behavior in Kitodo.Production, perform the following steps:</p> <ol> <li>Configure OCR workflows folder<ul> <li>Create folder <code>ocr_workflows</code> under <code>/usr/local/kitodo</code> to use default configuration or replace default path of <code>directory.ocr.workflow</code> property value in <code>kitodo_config.properties</code></li> <li>Add your OCR workflows with <code>*.sh</code> file extension to this folder</li> </ul> </li> <li>Add OCR workflow client authorities to your client<ul> <li>Navigate to user roles and edit role you want to add the authorities</li> <li>Under client authorities search for \"OCR workflow\" and assign authorities to role</li> </ul> </li> <li>Assign OCR workflow to process template<ul> <li>Navigates to project and click on \"New\" -&gt; \"New OCR workflow\"</li> <li>Enter the title of the OCR workflow and select one OCR workflow file which you have stored in the OCR workflows folder</li> <li>After saving the OCR workflow you will be redirected to list of all OCR Workflows in Kitodo.Production in tab \"OCR Workflows\" under projects</li> <li>Navigate to \"Process templates\" under projects and click on edit on the template which you want to link to the previously created \"OCR Workflow\"</li> <li>Under the label \"OCR Workflow\" select your created \"OCR Workflow\" by title and save the template</li> </ul> </li> </ol>"}, {"location": "usage/ocrd-controller/", "title": "OCR-D Controller", "text": ""}, {"location": "usage/ocrd-controller/#installation-of-ocr-d-models", "title": "Installation of OCR-D models", "text": "<p>Since all processor resources are mounted under the <code>CONTROLLER_MODELS</code> volume, resources will persist and thus only have to be downloaded once.</p> <p>Installation could be done by downloading the respective files into the filesystem (see <code>make prepare-examples</code>), or dynamically via the OCR-D Resource Manager:</p> <ol> <li>Start interactive shell on the Controller.    If <code>with-ocrd-controller</code> is enabled, and has been started,    by entering the running container:<pre><code>docker exec -u ocrd -it ocrd_kitodo-ocrd-controller-1 bash\n</code></pre> </li> </ol> <p>If running an external Controller instance, by logging in remotely:</p> <pre><code>    ssh -p $CONTROLLER_PORT_SSH ocrd@$CONTROLLER_HOST bash\n</code></pre> <ol> <li>Use the OCR-D Resource Manager to query and install models:<pre><code>ocrd resmgr download ocrd-tesserocr-recognize frak2021.traineddata\nocrd resmgr download ocrd-eynollah-segment default\nocrd resmgr list-installed\nocrd resmgr list-available\nocrd resmgr --help\n</code></pre> </li> </ol>"}, {"location": "usage/ocrd-manager/", "title": "OCR-D Manager", "text": ""}, {"location": "usage/ocrd-manager/#testing", "title": "Testing", "text": "<p>To download some testdata and process them on the OCR-D Manager (which must already be running, and must be able to connect to the Controller), do:</p> <pre><code>make test-production   # test for_production.sh (images\u2192ALTO-XML)\nmake test-presentation # test for_presentation.sh (METS\u2192METS)\nmake test              # run both\nmake clean-testdata    # remove the test data and test results\n</code></pre>"}, {"location": "usage/ocrd-manager/#ocrd-manager", "title": "ocrd-manager", "text": "<p>This service provides a pure SSH server under <code>${MANAGER_PORT_SSH}</code>, allowing a user <code>ocrd</code> to log in with the configured credentials. </p> <p>The system contains an installation of OCR-D/core, i.e. including the <code>ocrd</code> multi-purpose CLI. It also features two shell scripts meant as entry points for the most common integration scenarios:</p> <ul> <li><code>for_production.sh</code>: process image files, yield ALTO files</li> <li><code>for_presentation.sh</code>: process METS, yield updated METS and ALTO files</li> </ul> <p>For details of the user interface, see Manager Readme.</p>"}, {"location": "usage/ocrd-manager/#ocrd-monitor", "title": "ocrd-monitor", "text": "<p>Provides a web interface under <code>http://localhost:${MONITOR_PORT_WEB}</code> for </p> <ul> <li>browsing workspaces with OCR-D Browser to inspect intermediate/final processing results </li> <li>getting statistics of running and terminated jobs </li> <li>reading and searching Docker logs</li> </ul>"}, {"location": "usage/ocrd-manager/#ocrd-logview", "title": "ocrd-logview", "text": "<p>Provides a web interface under <code>http://localhost:${MONITOR_PORT_LOG}</code> using Dozzle for browsing live Docker logs of all running containers.</p>"}, {"location": "usage/overview/", "title": "Overview", "text": "<p>The various module services each serve different kinds of \"users\":</p> <ul> <li>ocrd-logview is an administrator tool showing live Docker logs for all containers.</li> <li>ocrd-controller is (currently) a dedicated SSH server    allowing a user <code>ocrd</code> to log in and run shell scripts which involve OCR-D workflows composed of various OCR-D processor calls.   (An external instance will behave the same, without being controlled as a service here.)</li> <li>ocrd-manager is (currently) a generic SSH server    allowing a user <code>ocrd</code> to log in and run shell scripts which involve OCR-D tasks (that will usually delegate to <code>ocrd-controller</code>), notably<ul> <li><code>for_production.sh</code></li> <li><code>for_presentation.sh</code></li> </ul> </li> <li>kitodo-app is an instance of    Kitodo.Production with some OCR-D specific,   optional extensions,   and some example data   which aids in our kick-start demonstration   (An external instance will behave the same, without being controlled as a service here \u2013     but with your actual data, and probably without the extensions.)</li> <li>ocrd-monitor provides a webserver for monitoring jobs and logs,    to inspect results and workflows, and customise+rerun workflows.</li> </ul> <p>Thus, only the latter two could be considered for \"end users\".</p> <p></p>"}, {"location": "usage/overview/#data", "title": "Data", "text": "<p>Depending on how exactly you set up your module services,  they will be configured to use a number of specific filesystem paths from your host system as persistent volumes inside the service containers. What follows is a description of the configuration variables, along with their respective default values and an explanation of their role and lifetime.</p> <p>(Again, if you have disabled said modules, then the same applies, but to their respective remote hosts.)</p> <ul> <li><code>CONTROLLER_MODELS=./ocrd/controller/models</code>:<ul> <li><code>$CONTROLLER_MODELS/ocrd-resources</code>: persistent storage directory for processor resources</li> </ul> </li> <li><code>CONTROLLER_CONFIG=./ocrd/controller/config</code>:<ul> <li><code>$CONTROLLER_CONFIG/ocrd/resources.yml</code>: persistent database for processor resources</li> </ul> </li> <li><code>CONTROLLER_DATA=./ocrd/controller/data</code>:<ul> <li><code>$CONTROLLER_DATA/KitodoJob*</code>: temporary storage for OCR-D workspaces during OCR processing   (all images and METS will be copied here; gets filled with OCR results; to be removed after the job is done)</li> </ul> </li> <li><code>MANAGER_DATA=./kitodo/data/metadata</code>:<ul> <li><code>$MANAGER_DATA/ocr-d/*</code>: transient storage for OCR-D workspaces between first OCR request and final success   (all images will be copied \u2013 cloned/CoW/reflink if possible \u2013 here; METS is created here; OCR results will be copied here;     can be re-used if the OCR job failed, e.g. by re-entering with a different workflow; to be removed sometime after    the OCR job was successful and no user interaction followed)</li> <li><code>$MANAGER_DATA/*</code>: directories for input (images or METS) and output (ALTO) files   (shared with Kitodo.Production or Kitodo.Presentation; to be removed by caller)</li> </ul> </li> <li><code>MONITOR_DATA=./kitodo/data/metadata</code>: same as <code>MANAGER_DATA</code>, shared for data browsing</li> <li><code>APP_DATA=./kitodo/data</code>:<ul> <li><code>$APP_DATA/metadata/*</code>: same as <code>MANAGER_DATA</code>, shared for i/o</li> </ul> </li> </ul> <p></p>"}]}